<template>
    <div class="bg-white">
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead>
            <tr class="bg-blue-500 text-white">
              <th class="px-4 py-3 text-left font-medium">№</th>
              <th class="px-4 py-3 text-left font-medium">{{$t('tabmod.tabname')}}</th>
              <th class="px-4 py-3 text-left font-medium">
                {{$t('tabmod.mail')}}
                <svg class="inline ml-1 w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 12l-5-5 1.41-1.41L10 9.17l3.59-3.58L15 7l-5 5z"/>
                </svg>
              </th>
              <th class="px-4 py-3 text-left font-medium">
                {{$t('tabmod.createDate')}}
                <svg class="inline ml-1 w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 12l-5-5 1.41-1.41L10 9.17l3.59-3.58L15 7l-5 5z"/>
                </svg>
              </th>
              <th class="px-4 py-3 text-left font-medium">{{$t('tabmod.action')}}</th>
            </tr>
          </thead>
          <tbody>
            <tr
              v-for="(item, index) in paginatedData"
              :key="item.id"
              :class="index % 2 === 0 ? 'bg-blue-50' : 'bg-white'"
            >
              <td class="px-4 py-3 text-sm">
                {{ (currentPage - 1) * itemsPerPage + index + 1 }}
              </td>
              <td class="px-4 py-3 text-sm">{{ item.fio }}</td>
              <td class="px-4 py-3 text-sm text-blue-600">{{ item.email }}</td>
              <td class="px-4 py-3 text-sm">{{ item.date }}</td>
              <td class="px-4 py-3">
                <div class="flex gap-2">
                  <button
                    @click="handleEdit(item)"
                    class="text-blue-500 hover:text-blue-700"
                    title="Редактировать"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                  <button
                    @click="handleDelete(item.id)"
                    class="text-red-500 hover:text-red-700"
                    title="Удалить"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div class="flex items-center justify-end px-4 py-3 bg-white border-t border-gray-200">
        <div class="flex items-center text-sm text-gray-700 mt-2">
          {{$t('page')}} {{ currentPage }} из {{ totalPages }}
        </div>

        <div class="flex items-center space-x-1">
          <button
            @click="goToPrevious"
            :disabled="currentPage === 1"
            :class="[
              'px-3 py-2 text-sm font-medium rounded-md',
              currentPage === 1
                ? 'text-gray-300 cursor-not-allowed'
                : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
            ]"
          >
            ‹
          </button>

          <button
            v-for="(page, index) in visiblePages"
            :key="index"
            @click="typeof page === 'number' && goToPage(page)"
            :disabled="page === '...'"
            :class="[
              'px-3 py-2 text-sm font-medium rounded-md',
              page === currentPage
                ? 'bg-blue-500 text-white'
                : page === '...'
                ? 'text-gray-400 cursor-default'
                : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'
            ]"
          >
            {{ page }}
          </button>

          <button
            @click="goToNext"
            :disabled="currentPage === totalPages"
            :class="[
              'px-3 py-2 text-sm font-medium rounded-md',
              currentPage === totalPages
                ? 'text-gray-300 cursor-not-allowed'
                : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
            ]"
          >
            ›
          </button>
        </div>
      </div>

      <div
        v-if="showEditModal"
        class="fixed inset-0 z-50 flex items-center justify-center bg-black/60"
      >
        <div class="bg-white rounded-lg shadow-lg w-full max-w-[800px]">
          <div class="bg-white border-b rounded-lg pl-4 border-gray-300 flex items-center justify-between">
            <p class="text-[15px] text-[#07A920] font-[700]">{{$t(`updatecreate`)}}</p>
            <button @click="closeEditModal" class="text-gray-700 text-[42px] hover:text-red-500 border-l border-gray-300 px-4">&times;</button>
          </div>
          <div>
            <form @submit.prevent="updateUser">
              <div class="mb-4 px-8 pt-8">
                <label class="block mb-2 text-sm font-bold text-gray-700" for="minorgan_select_edit">
                  {{ $t('minorgan') }}
                </label>
                <div class="relative">
                  <div class="relative">
                    <button
                      type="button"
                      @click="toggleEditDropdown"
                      class="w-full px-4 py-2 border border-gray-500 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm text-left bg-white flex items-center justify-between"
                      :class="{ 'border-blue-500 ring-2 ring-blue-500': isEditDropdownOpen }"
                    >
                      <span :class="{ 'text-gray-500': !selectedEditMinorgan }">
                        {{ selectedEditMinorgan ? getLocalizedName(selectedEditMinorgan) : $t('minorgan') }}
                      </span>
                      <svg
                        class="w-5 h-5 text-gray-400 transition-transform duration-200"
                        :class="{ 'rotate-180': isEditDropdownOpen }"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </button>

                    <div
                      v-if="isEditDropdownOpen"
                      class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto"
                    >
                      <div v-if="loadingMinorgan" class="px-4 py-3 text-sm text-gray-500 flex items-center">
                        <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        {{$t('loading')}}
                      </div>

                      <div v-else-if="minorganError" class="px-4 py-3 text-sm text-red-600 bg-red-50">
                        {{ minorganError }}
                      </div>

                      <div v-else-if="minorganList.length > 0" class="py-1">
                        <button
                          v-for="item in minorganList"
                          :key="item.id"
                          type="button"
                          @click="selectEditMinorgan(item)"
                          class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-700 focus:outline-none focus:bg-blue-50"
                          :class="{ 'bg-blue-100 text-blue-700': selectedEditMinorgan && selectedEditMinorgan.id === item.id }"
                        >
                          {{ getLocalizedName(item) }}
                        </button>
                      </div>

                      <div v-else class="px-4 py-3 text-sm text-gray-500">
                        {{$t('no_data_found')}}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="flex items-center justify-between px-8 pb-8 space-x-[16px]">
                <div class="mb-4 w-full">
                  <label class="block mb-2 text-sm font-bold" for="edit_email">
                    {{$t('mail')}}
                  </label>
                  <div class="relative">
                    <input
                      v-model="editEmail"
                      id="edit_email"
                      type="email"
                      class="w-full px-4 py-2 border border-gray-500 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                      placeholder="example@mail.uz"
                      required
                    />
                  </div>
                </div>
                <div class="mb-4 w-full">
                  <label class="block mb-2 text-sm font-bold" for="edit_password">
                    {{$t('formpassword')}}
                  </label>
                  <div class="relative">
                    <input
                      v-model="editPassword"
                      id="edit_password"
                      :type="showEditPassword ? 'text' : 'password'"
                      class="w-full px-4 py-2 border border-gray-500 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                      placeholder="• • • • • • • •"
                    />
                    <div
                      @click="showEditPassword = !showEditPassword"
                      class="absolute inset-y-0 right-0 flex items-center pr-3 cursor-pointer text-gray-400"
                    >
                      <svg v-if="showEditPassword" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                        <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd" />
                        <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                      </svg>
                      <svg v-else xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>

              <div class="flex items-center p-4 space-x-6">
                <button
                  @click="closeEditModal"
                  type="button"
                  class="w-full px-4 py-2 bg-[#DCDCDC] rounded-md hover:bg-gray-400 focus:outline-none focus:bg-gray-400"
                >
                  {{$t('cancel')}}
                </button>
                <button
                  type="submit"
                  :disabled="!selectedEditMinorgan || !editEmail || updateLoading"
                  class="w-full px-4 py-2 text-white bg-[#07A920] rounded-md hover:bg-green-700 focus:outline-none focus:bg-green-600 disabled:bg-gray-400 disabled:cursor-not-allowed"
                >
                  {{ updateLoading ? $t('loading') : $t('save') }}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
</template>

<script setup>
import { ref, onMounted, computed, inject } from 'vue'
import { useI18n } from 'vue-i18n' // Vue i18n hook
import axios from 'axios'

// Vue i18n dan $t va locale ni olish
const { t: $t, locale } = useI18n()

// --- Create Modal (original) variables and functions ---
// Bu qism yuqoridagi "Create Modal" dan kelgan, agar u alohida komponent bo'lsa, bu yerda takrorlash shart emas.
// Lekin agar bir xil joyda ishlatilayotgan bo'lsa, bu o'zgaruvchilar va funksiyalar kerak bo'ladi.
const showPassword = ref(false)
const openmodal = ref(false) // Bu endi create modal uchun
// const isDropdownOpen = ref(false) // Bu endi update modalda alohida bo'ladi
// const loading = ref(false) // Bu endi update modalda alohida bo'ladi
// const error = ref('') // Bu endi update modalda alohida bo'ladi

// Form data (create modal)
const selectedMinorgan = ref(null) // Bu create modal uchun
const email = ref('') // Bu create modal uchun
const password = ref('') // Bu create modal uchun

// Modal functions (create modal)
const showModal = () => {
    openmodal.value = true
    fetchMinorganData() // Umumiy fetch funksiyasi
    resetForm()
}

const closeModal = () => {
    openmodal.value = false
    isDropdownOpen.value = false // Create modalning dropdownini yopish
}

const resetForm = () => {
    selectedMinorgan.value = null
    email.value = ''
    password.value = ''
    // error.value = '' // Create modalning xatosi
}

// Dropdown functions (create modal) - Agar kerak bo'lsa, bu yerda qoladi.
// Faqat `isDropdownOpen` va `selectMinorgan` nomlari `isCreateDropdownOpen` va `selectCreateMinorgan` ga o'zgartirilishi mumkin
// to'qnashuvni oldini olish uchun. Hozircha shu holatda qoldirildi, chunki Update modalning o'z dropdowni bor.
const toggleDropdown = () => {
    isDropdownOpen.value = !isDropdownOpen.value
    if (isDropdownOpen.value && minorganList.value.length === 0) {
        fetchMinorganData()
    }
}

const selectMinorgan = (item) => {
    selectedMinorgan.value = item
    isDropdownOpen.value = false
}

// --- Yangi "Update Modal" uchun o'zgaruvchilar va funksiyalar ---
const showEditModal = ref(false) // Update modalni ko'rsatish/yashirish
const isEditDropdownOpen = ref(false) // Update modal ichidagi dropdown holati
const loadingMinorgan = ref(false) // Update modal ichidagi minorgan yuklanishi
const minorganError = ref('') // Update modal ichidagi minorgan xatosi
const updateLoading = ref(false) // Update formasi submit bo'lishi holati

const currentEditedItem = ref(null) // Tahrirlanayotgan qatorning ma'lumotlari
const selectedEditMinorgan = ref(null) // Update modalda tanlangan minorgan
const editEmail = ref('') // Update modaldagi email
const editPassword = ref('') // Update modaldagi password
const showEditPassword = ref(false) // Update modalda passwordni ko'rsatish/yashirish


// Hozirgi tilni olish - computed bo'lishi kerak reactive bo'lishi uchun
const currentLanguage = computed(() => locale.value)

// Tildagi nomlarni olish funksiyasi - yaxshilangan versiya
const getLocalizedName = (item) => {
    if (!item) return ''

    const lang = currentLanguage.value

    // Avval hozirgi tilni tekshirish
    if (item[lang]) return item[lang]

    // name obyektidan izlash
    if (item.name && typeof item.name === 'object') {
        if (item.name[lang]) return item.name[lang]
        // Fallback tartibi: oz uchun uz dan foydalanish, keyin boshqalar
        if (lang === 'oz' && item.name.uz) return item.name.uz

        const fallbackOrder = ['uz', 'ru', 'eng', 'en']
        for (const fallbackLang of fallbackOrder) {
            if (item.name[fallbackLang]) return item.name[fallbackLang]
        }
        // Agar hech qaysi til topilmasa, birinchi qiymatni qaytarish
        const firstKey = Object.keys(item.name)[0]
        if (firstKey) return item.name[firstKey]
    }

    // oz tili uchun uz dan fallback
    if (lang === 'oz' && item.uz) return item.uz

    // Oddiy string nom
    if (typeof item.name === 'string') return item.name

    // Fallback qiymatlar
    const fallbackFields = ['title', 'label', 'text']
    for (const field of fallbackFields) {
        if (item[field]) {
            if (typeof item[field] === 'object') {
                if (item[field][lang]) return item[field][lang]
                if (lang === 'oz' && item[field].uz) return item[field].uz
            } else if (typeof item[field] === 'string') {
                return item[field]
            }
        }
    }

    // Default: ID bilan
    return `${$t('organization')} ${item.id}`
}

// API function - yaxshilangan (ikkala modal uchun umumiy)
const minorganList = ref([]) // Buni globalroq qilish kerak, chunki ikkala modal ham ishlatadi
const fetchMinorganData = async () => {
    loadingMinorgan.value = true
    minorganError.value = ''

    try {
        const response = await axios.get('https://shartnoma.miit.uz/api/api_directory', {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            },
            params: {
                start_id: 29,
                end_id: 64,
            }
        })

        let data = response.data

        if (!Array.isArray(data)) {
            if (data.data && Array.isArray(data.data)) {
                data = data.data
            } else if (data.items && Array.isArray(data.items)) {
                data = data.items
            } else {
                throw new Error('API dan noto\'g\'ri format qaytarildi')
            }
        }

        const filteredData = data.filter(item => {
            const id = parseInt(item.id)
            return id >= 29 && id <= 64
        })

        minorganList.value = filteredData.map(item => {
            const uzName = item.name_uz || item.uz || item.name?.uz

            return {
                id: item.id,
                uz: uzName,
                oz: item.name_oz || item.oz || item.name?.oz || uzName,
                ru: item.name_ru || item.ru || item.name?.ru,
                eng: item.name_eng || item.eng || item.name?.eng || item.name?.en,
                en: item.name_en || item.en || item.name?.en,
                name: item.name,
                title: item.title,
                label: item.label
            }
        })

    } catch (err) {
        console.error('API xatosi:', err)

        if (err.response) {
            minorganError.value = `Server xatosi: ${err.response.status} - ${err.response.statusText}`
        } else if (err.request) {
            minorganError.value = $t('network_error')
        } else {
            minorganError.value = `${$t('error')}: ${err.message}`
        }

    } finally {
        loadingMinorgan.value = false
    }
}

// --- Pagination va Table ma'lumotlari (ikkinchi koddan) ---
const tableData = ref([
  { id: 1, fio: 'Aliyev Valijon', email: 'aliyev@mail.uz', date: '2023-01-15', minorgan_id: 30, minorgan_name: { uz: 'Ta\'lim vazirligi' } },
  { id: 2, fio: 'Salimova Dilnoza', email: 'salimova@mail.uz', date: '2023-02-20', minorgan_id: 31, minorgan_name: { uz: 'Sog\'liqni saqlash vazirligi' } },
  { id: 3, fio: 'Karimov Bahodir', email: 'karimov@mail.uz', date: '2023-03-10', minorgan_id: 32, minorgan_name: { uz: 'Moliya vazirligi' } },
  { id: 4, fio: 'Nazarova Gulnora', email: 'nazarova@mail.uz', date: '2023-04-01', minorgan_id: 29, minorgan_name: { uz: 'Axborotlashtirish va telekommunikatsiyalarni rivojlantirish vazirligi' } },
  { id: 5, fio: 'Ismailov Javohir', email: 'ismailov@mail.uz', date: '2023-05-05', minorgan_id: 33, minorgan_name: { uz: 'Ichki ishlar vazirligi' } },
  { id: 6, fio: 'Sobirova Madina', email: 'sobirova@mail.uz', date: '2023-06-12', minorgan_id: 34, minorgan_name: { uz: 'Tashqi ishlar vazirligi' } },
  { id: 7, fio: 'Tursunov Azamat', email: 'tursunov@mail.uz', date: '2023-07-22', minorgan_id: 35, minorgan_name: { uz: 'Mudofaa vazirligi' } },
  { id: 8, fio: 'Rahimova Komila', email: 'rahimova@mail.uz', date: '2023-08-01', minorgan_id: 30, minorgan_name: { uz: 'Ta\'lim vazirligi' } },
  { id: 9, fio: 'Boburjonov Sardor', email: 'boburjonov@mail.uz', date: '2023-09-11', minorgan_id: 31, minorgan_name: { uz: 'Sog\'liqni saqlash vazirligi' } },
  { id: 10, fio: 'Umarova Shoira', email: 'umarova@mail.uz', date: '2023-10-18', minorgan_id: 32, minorgan_name: { uz: 'Moliya vazirligi' } },
  { id: 11, fio: 'Zokirov Bekzod', email: 'zokirov@mail.uz', date: '2023-11-25', minorgan_id: 29, minorgan_name: { uz: 'Axborotlashtirish va telekommunikatsiyalarni rivojlantirish vazirligi' } },
  { id: 12, fio: 'Fayzieva Nigina', email: 'fayzieva@mail.uz', date: '2023-12-30', minorgan_id: 33, minorgan_name: { uz: 'Ichki ishlar vazirligi' } },
  { id: 13, fio: 'G`aniyev Davron', email: 'ganiyev@mail.uz', date: '2024-01-05', minorgan_id: 34, minorgan_name: { uz: 'Tashqi ishlar vazirligi' } },
  { id: 14, fio: 'Xoliqova Lola', email: 'xoliqova@mail.uz', date: '2024-02-14', minorgan_id: 35, minorgan_name: { uz: 'Mudofaa vazirligi' } },
  { id: 15, fio: 'Qodirov Jamshid', email: 'qodirov@mail.uz', date: '2024-03-21', minorgan_id: 30, minorgan_name: { uz: 'Ta\'lim vazirligi' } },
  { id: 16, fio: 'Yusupova Aziza', email: 'yusupova@mail.uz', date: '2024-04-03', minorgan_id: 31, minorgan_name: { uz: 'Sog\'liqni saqlash vazirligi' } },
  { id: 17, fio: 'Shermatov Oybek', email: 'shermatov@mail.uz', date: '2024-05-10', minorgan_id: 32, minorgan_name: { uz: 'Moliya vazirligi' } },
  { id: 18, fio: 'Masharipova Nozima', email: 'masharipova@mail.uz', date: '2024-06-19', minorgan_id: 29, minorgan_name: { uz: 'Axborotlashtirish va telekommunikatsiyalarni rivojlantirish vazirligi' } },
  { id: 19, fio: 'Rustamov Eldor', email: 'rustamov@mail.uz', date: '2024-07-28', minorgan_id: 33, minorgan_name: { uz: 'Ichki ishlar vazirligi' } },
  { id: 20, fio: 'Jo\'rayeva Dilorom', email: 'jorayeva@mail.uz', date: '2024-08-08', minorgan_id: 34, minorgan_name: { uz: 'Tashqi ishlar vazirligi' } }
]);

const currentPage = ref(1);
const itemsPerPage = 10; // Har sahifada 10 ta element

const totalPages = computed(() => Math.ceil(tableData.value.length / itemsPerPage));

const paginatedData = computed(() => {
  const start = (currentPage.value - 1) * itemsPerPage;
  const end = start + itemsPerPage;
  return tableData.value.slice(start, end);
});

const visiblePages = computed(() => {
  const pages = [];
  const maxVisible = 5; // Ko'rsatiladigan sahifalar soni
  const startPage = Math.max(1, currentPage.value - Math.floor(maxVisible / 2));
  const endPage = Math.min(totalPages.value, startPage + maxVisible - 1);

  if (startPage > 1) {
    pages.push(1);
    if (startPage > 2) pages.push('...');
  }

  for (let i = startPage; i <= endPage; i++) {
    pages.push(i);
  }

  if (endPage < totalPages.value) {
    if (endPage < totalPages.value - 1) pages.push('...');
    pages.push(totalPages.value);
  }
  return pages;
});

const goToPage = (page) => {
  if (page >= 1 && page <= totalPages.value) {
    currentPage.value = page;
  }
};

const goToPrevious = () => {
  if (currentPage.value > 1) {
    currentPage.value--;
  }
};

const goToNext = () => {
  if (currentPage.value < totalPages.value) {
    currentPage.value++;
  }
};

// --- Update Modal bilan bog'liq funksiyalar ---
const handleEdit = (item) => {
    currentEditedItem.value = item;
    editEmail.value = item.email;
    // Passwordni har doim yangilash kerak bo'lsa, bu yerga default qiymat berish mumkin.
    // Agar o'zgarmasa, bo'sh qoldirish ham mumkin. Xavfsizlik nuqtai nazaridan passwordni oldindan to'ldirish tavsiya etilmaydi.
    editPassword.value = ''; // Parolni har doim tozalash yaxshi amaliyot
    showEditModal.value = true;
    fetchMinorganData(); // Minorgan ro'yxatini yuklash

    // Tanlangan minorganni topish va oldindan tanlash
    if (item.minorgan_id) {
        // `minorganList` hozirda yuklanayotgan bo'lishi mumkin, shuning uchun keyingi tickda tekshiramiz
        const checkMinorgan = () => {
            const foundMinorgan = minorganList.value.find(org => org.id == item.minorgan_id);
            if (foundMinorgan) {
                selectedEditMinorgan.value = foundMinorgan;
            } else if (minorganList.value.length === 0 && !loadingMinorgan.value && !minorganError.value) {
                // Agar ro'yxat bo'sh bo'lsa va yuklash tugagan bo'lsa, topilmadi degani
                console.warn(`Minorgan ID ${item.minorgan_id} ro'yxatda topilmadi.`);
            } else if (loadingMinorgan.value) {
                // Agar hali yuklanayotgan bo'lsa, biroz kutib qayta tekshiramiz
                setTimeout(checkMinorgan, 100);
            }
        };
        checkMinorgan();
    } else {
        selectedEditMinorgan.value = null;
    }
};


const closeEditModal = () => {
    showEditModal.value = false;
    isEditDropdownOpen.value = false;
    currentEditedItem.value = null;
    selectedEditMinorgan.value = null;
    editEmail.value = '';
    editPassword.value = '';
    minorganError.value = ''; // Modal yopilganda xatolarni tozalash
};

const toggleEditDropdown = () => {
    isEditDropdownOpen.value = !isEditDropdownOpen.value;
    if (isEditDropdownOpen.value && minorganList.value.length === 0) {
        fetchMinorganData();
    }
};

const selectEditMinorgan = (item) => {
    selectedEditMinorgan.value = item;
    isEditDropdownOpen.value = false;
};

const updateUser = async () => {
    if (!selectedEditMinorgan.value || !editEmail.value) {
        minorganError.value = $t('fill_all_fields'); // Update formasi uchun xabar
        return;
    }
    if (!currentEditedItem.value) {
        minorganError.value = "Tahrirlash uchun foydalanuvchi tanlanmagan.";
        return;
    }

    updateLoading.value = true;
    minorganError.value = '';

    try {
        console.log('Update uchun forma ma\'lumotlari:', {
            id: currentEditedItem.value.id,
            minorgan_id: selectedEditMinorgan.value.id,
            email: editEmail.value,
            // Faqat parolni o'zgartirish kerak bo'lsa, uni yuborish
            password: editPassword.value || undefined // Agar bo'sh bo'lsa, yuborilmaydi
        });

        // API ga PUT/PATCH so'rov yuborish
        const response = await axios.put(`https://shartnoma.miit.uz/api/update_user/${currentEditedItem.value.id}`, {
            minorgan_id: selectedEditMinorgan.value.id,
            email: editEmail.value,
            password: editPassword.value, // Faqatgina foydalanuvchi parolni kiritgan bo'lsa yuboriladi
        }, {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            }
        });

        alert($t('user_updated_successfully'));
        // Jadvalni yangilash yoki o'zgartirilgan elementni yangilash
        const index = tableData.value.findIndex(item => item.id === currentEditedItem.value.id);
        if (index !== -1) {
            tableData.value[index].email = editEmail.value;
            // Minorgan nomini ham yangilash
            tableData.value[index].minorgan_id = selectedEditMinorgan.value.id;
            tableData.value[index].minorgan_name = {
                uz: getLocalizedName(selectedEditMinorgan.value)
            };
        }
        closeEditModal();

    } catch (err) {
        console.error('Formani yangilashda xato:', err);
        minorganError.value = `${$t('error')}: ${err.response?.data?.message || err.message}`;
    } finally {
        updateLoading.value = false;
    }
};

const handleDelete = async (id) => {
    if (confirm($t('confirm_delete'))) {
        try {
            await axios.delete(`https://shartnoma.miit.uz/api/delete_user/${id}`);
            alert($t('user_deleted_successfully'));
            tableData.value = tableData.value.filter(item => item.id !== id);
        } catch (err) {
            console.error('Foydalanuvchini o\'chirishda xato:', err);
            alert(`${$t('error_deleting_user')}: ${err.message}`);
        }
    }
};

// Click outside dropdown to close (umumiy funksiya)
const handleClickOutside = (event) => {
  // Update modalning dropdownini yopish
  if (isEditDropdownOpen.value && !event.target.closest('.relative')) {
    isEditDropdownOpen.value = false;
  }
  // Create modalning dropdownini yopish
  if (openmodal.value && !event.target.closest('.relative')) {
    // Agar create modal ochiq bo'lsa, uning dropdownini ham yopish
    if (isDropdownOpen.value && !event.target.closest('.relative')) {
      isDropdownOpen.value = false;
    }
  }
};

// Mount lifecycle
onMounted(() => {
    document.addEventListener('click', handleClickOutside);
    // Component yuklanganda minorgan ma'lumotlarini yuklash (agar oldindan yuklash kerak bo'lsa)
    fetchMinorganData();
})
</script>

<style lang="css" scoped>
@keyframes fade-slide-in {
    0% {
        opacity: 0;
        transform: translateY(-20px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

.modal-content {
    animation: fade-slide-in 0.4s ease-out;
}

.rotate-180 {
    transform: rotate(180deg);
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

.animate-spin {
    animation: spin 1s linear infinite;
}

/* Custom scrollbar for dropdown */
.max-h-60::-webkit-scrollbar {
    width: 6px;
}

.max-h-60::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.max-h-60::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
}

.max-h-60::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}
</style>



<!-- selection -->



<div class="mb-4 px-8 pt-8">
    <label class="block mb-2 text-sm font-bold text-gray-700" for="minorgan_select">
      {{ $t('minorgan') }}
    </label>
    <div class="relative">
      <!-- Custom Select Dropdown -->
      <div class="relative">
        <button
          type="button"
          @click="toggleDropdown"
          class="w-full px-4 py-2 border border-gray-500 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm text-left bg-white flex items-center justify-between"
          :class="{ 'border-blue-500 ring-2 ring-blue-500': isDropdownOpen }"
        >
          <span :class="{ 'text-gray-500': !selectedMinorgan }">
            {{ selectedMinorgan ? getLocalizedName(selectedMinorgan) : $t('minorgan') }}
          </span>
          <svg 
            class="w-5 h-5 text-gray-400 transition-transform duration-200"
            :class="{ 'rotate-180': isDropdownOpen }"
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>

        <!-- Dropdown Menu -->
        <div 
          v-if="isDropdownOpen" 
          class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto"
        >
          <!-- Loading -->
          <div v-if="loading" class="px-4 py-3 text-sm text-gray-500 flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            {{$t('loading')}}
          </div>

          <!-- Error Message -->
          <div v-else-if="error" class="px-4 py-3 text-sm text-red-600 bg-red-50">
            {{ error }}
          </div>

          <!-- Options -->
          <div v-else-if="minorganList.length > 0" class="py-1">
            <button
              v-for="item in minorganList"
              :key="item.id"
              type="button"
              @click="selectMinorgan(item)"
              class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-700 focus:outline-none focus:bg-blue-50"
              :class="{ 'bg-blue-100 text-blue-700': selectedMinorgan && selectedMinorgan.id === item.id }"
            >
              {{ getLocalizedName(item) }}
            </button>
          </div>

          <!-- No Data -->
          <div v-else class="px-4 py-3 text-sm text-gray-500">
            {{$t('no_data_found')}}
          </div>
        </div>
      </div>
    </div>
</div>